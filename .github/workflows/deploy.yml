# separate terms of service, privacy policy, and support
# documentation.
##########################################################################
# This workflow will build a Java project with Gradle and
# cache/restore any dependencies to improve the workflow execution time
##########################################################################
name: Testing FastAPI, GraphQL, MongoDB, using Docker Compose
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.7", "3.8", "3.9",  "3.10" ]
    steps:
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Checkout
        uses: actions/checkout@v2

      # Task for installing dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install black pytest wheel setuptools build twine

          if [ -f requirements.txt ]; then pip install  -r requirements.txt ; fi 

      # Task for linting with black
      - name: Lint with black
        run: |
          # Code formatting with black, check every python file in the src directory 
          black hardyweinbergcalculator
          black --check hardyweinbergcalculator
          

      # Task for running tests
      - name: Execute tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pytest

      # Task for running tests
      - name: Execute build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python setup.py sdist bdist_wheel 2>&1

      # Task for uploading test results
      - name: Upload build artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-artifact@v2
        with:
          name: Build-Results
          path: |
            dist
            hardyweinbergcalculator.egg-info
            tests/logs
            README.md
            LICENSE

      # Deploy to PyPI
      - name: Deploy to PyPI
        env:
          TWINE_REPOSITORY_URL: ${{ secrets.TWINE_REPOSITORY_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          echo "[pypi]" > ~/.pypirc
          echo "  username = $TWINE_USERNAME" >> ~/.pypirc
          echo "  password = $TWINE_PASSWORD" >> ~/.pypirc
          python3 -m twine upload --skip-existing dist/*
